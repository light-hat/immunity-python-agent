name: Release agent

on:
  workflow_dispatch:

jobs:

  ubuntu:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-22.04" ]
        python-version: [ "3.7" ] #, "3.8", "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y gcc make cmake

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build auditwheel

      - name: Build wheel and sdist
        run: |
          python -m build --wheel --sdist

      - name: Repair wheels with auditwheel
        run: |
          # Определяем архитектуру и соответствующий тег manylinux
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            PLAT="manylinux2014_x86_64"
          elif [ "$ARCH" = "aarch64" ]; then
            PLAT="manylinux2014_aarch64"
          else
            echo "Unsupported architecture: $ARCH"
            exit 1
          fi

          # Создаем временную директорию для исправленных колес
          mkdir -p repaired_wheels
          
          # Исправляем каждое колесо
          for wheel in dist/*.whl; do
            auditwheel repair "$wheel" --plat $PLAT -w repaired_wheels/
          done

          # Заменяем оригинальные колеса исправленными
          rm -f dist/*.whl
          mv repaired_wheels/*.whl dist/
          rmdir repaired_wheels

      - name: List artifacts
        run: |
          ls -la dist/

      - name: Upload artifacts (wheels and sdist)
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/
          retention-days: 1

  # windows:
  #   runs-on: ${{ matrix.os }}
  #   permissions:
  #     contents: read
  #   needs: [ubuntu]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ "windows-latest" ]
  #       python-version: [ "3.6" ] #, "3.7", "3.8", "3.9", "3.10", "3.11", "3.12" ]

  #   steps:
  #     - name: Clone Repository
  #       uses: actions/checkout@v2

  #     - name: Install Visual Studio
  #       uses: microsoft/setup-msbuild@v1.1
  #       with:
  #         msbuild-architecture: x64

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install packages
  #       run: |
  #         pip install cmake

  #     - name: Install build dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install build

  #     - name: Build wheel and sdist
  #       run: |
  #         python -m build --wheel --sdist
          
  #     - name: Upload artifacts (wheels and sdist)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
  #         path: dist/
  #         retention-days: 1

  publish:
    name: Publish package to PyPI
    runs-on: ubuntu-latest
    needs: [ ubuntu ] #, windows ]
    environment: pypi
    permissions:
      id-token: write

    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: List files for debugging
        run: ls -la dist/

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.USR }}
          TWINE_PASSWORD: ${{ secrets.PWD }}
        run: |
          pip install --upgrade setuptools wheel twine build
          python3 -m twine upload dist/*
