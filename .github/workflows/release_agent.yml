name: Release agent

on:
  workflow_dispatch:

jobs:

  linux:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-22.04" ]
        python-version: [ "3.7" ] #, "3.8", "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y gcc make cmake

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Install build dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install build

      - name: Build for Linux (manylinux2014)
        run: |
          docker run --rm -v $PWD:/io \
            -e PYTHON_VERSION=${{ matrix.python-version }} \
            quay.io/pypa/manylinux2014_x86_64 /bin/bash -c "
            # Устанавливаем системные зависимости
            yum install -y cmake make
            
            # Прямое определение тега на основе версии Python
            MAJOR_MINOR=\$(echo \$PYTHON_VERSION | cut -d. -f1,2 | tr -d .)
            if [ \$(echo \"\$PYTHON_VERSION\" | cut -d. -f2) -lt 8 ]; then
              SUFFIX=\"m\"
            else
              SUFFIX=\"\"
            fi
            PYTHON_TAG=\"cp\${MAJOR_MINOR}-cp\${MAJOR_MINOR}\${SUFFIX}\"
            echo \"Using Python tag: \$PYTHON_TAG\"
            
            # Собираем wheel
            /opt/python/\$PYTHON_TAG/bin/pip install build
            /opt/python/\$PYTHON_TAG/bin/python -m build --wheel --outdir /io/dist/
          "

      - name: List artifacts
        run: |
          ls -la dist/

      - name: Upload artifacts (wheels and sdist)
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/
          retention-days: 1

  # windows:
  #   runs-on: ${{ matrix.os }}
  #   permissions:
  #     contents: read
  #   needs: [ubuntu]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ "windows-latest" ]
  #       python-version: [ "3.6" ] #, "3.7", "3.8", "3.9", "3.10", "3.11", "3.12" ]

  #   steps:
  #     - name: Clone Repository
  #       uses: actions/checkout@v2

  #     - name: Install Visual Studio
  #       uses: microsoft/setup-msbuild@v1.1
  #       with:
  #         msbuild-architecture: x64

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install packages
  #       run: |
  #         pip install cmake

  #     - name: Install build dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install build

  #     - name: Build wheel and sdist
  #       run: |
  #         python -m build --wheel --sdist
          
  #     - name: Upload artifacts (wheels and sdist)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist-${{ matrix.os }}-py${{ matrix.python-version }}
  #         path: dist/
  #         retention-days: 1

  publish:
    name: Publish package to PyPI
    runs-on: ubuntu-latest
    needs: [ linux ] #, windows ]
    environment: pypi
    permissions:
      id-token: write

    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: List files for debugging
        run: ls -la dist/

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.USR }}
          TWINE_PASSWORD: ${{ secrets.PWD }}
        run: |
          pip install --upgrade setuptools wheel twine build
          python3 -m twine upload dist/*
